import socket
import cPickle as pickle
import socket
from mininet.topo import Topo
from mininet.net import Mininet
from mininet.link import TCLink
from mininet.node import Controller, RemoteController  # node import controller component
from mininet.cli import CLI
from mininet.log import setLogLevel
import time

class FatTreeTopo(Topo):
    # "Create Fat Tree Topology"

    # every nodes list
    coreSwitch = []
    aggrSwitch = []
    edgeSwitch = []
    host = []

    def __init__(self):

        coreSwitchNumber = 4
        self.coreSwitchNumber = coreSwitchNumber
        self.aggrSwitchNumber = coreSwitchNumber * 2
        self.edgeSwitchNumber = coreSwitchNumber * 2
        self.hostNumber = self.edgeSwitchNumber * 2

        # initialize topology
        Topo.__init__(self)

    # add hosts and switches
    def createCoreSwitch(self, number, net):
        for i in range(1, number + 1):
            prefix = "100"
            self.coreSwitch.append(net.addSwitch(prefix + str(i)))
            # print self.coreSwitch

    def createAggrSwitch(self, number, net):
        for i in range(1, number + 1):
            prefix = "200"
            self.aggrSwitch.append(net.addSwitch(prefix + str(i)))

    def createEdgeSwitch(self, number, net):
        for i in range(1, number + 1):
            prefix = "300"
            self.edgeSwitch.append(net.addSwitch(prefix + str(i)))

    def createHost(self, number, net):
        for i in range(1, number + 1):
            prefix = "400"
            self.host.append(net.addHost(prefix + str(i)))

    def createSwitchAndHost(self, net):
        self.createCoreSwitch(self.coreSwitchNumber, net)
        self.createAggrSwitch(self.aggrSwitchNumber, net)
        self.createEdgeSwitch(self.edgeSwitchNumber, net)
        self.createHost(self.hostNumber, net)

    # add links
    def createLinks(self, net):
        # link core and aggregation
        for i in range(0, self.aggrSwitchNumber, 2):
            net.addLink(self.coreSwitch[0], self.aggrSwitch[i])
            net.addLink(self.coreSwitch[1], self.aggrSwitch[i])
        for i in range(1, self.aggrSwitchNumber, 2):
            net.addLink(self.coreSwitch[2], self.aggrSwitch[i])
            net.addLink(self.coreSwitch[3], self.aggrSwitch[i])
        # link aggregation and edge
        for i in range(0, self.aggrSwitchNumber, 2):
            net.addLink(self.aggrSwitch[i], self.edgeSwitch[i])
            net.addLink(self.aggrSwitch[i], self.edgeSwitch[i + 1])
            net.addLink(self.aggrSwitch[i + 1], self.edgeSwitch[i])
            net.addLink(self.aggrSwitch[i + 1], self.edgeSwitch[i + 1])
        # link edge and host
        for i in range(0, self.edgeSwitchNumber):
            net.addLink(self.edgeSwitch[i], self.host[2 * i])
            net.addLink(self.edgeSwitch[i], self.host[2 * i + 1])

    def returnCoreSwitch(self):
        return self.coreSwitch

    def returnAggrSwitch(self):
        return self.aggrSwitch

    def returnEdgeSwitch(self):
        return self.edgeSwitch

    def returnCoreSwitchNumber(self):
        return self.coreSwitchNumber

    def returnAggrSwitchNumber(self):
        return self.aggrSwitchNumber

    def returnEdgeSwitchNumber(self):
        return self.edgeSwitchNumber


def getGAdata(GAlist,sendresult):


    for i in range(0, len(GAlist)):
        sendresult.append(GAlist[i])


def recvdata(sendresult):
    # int = 0

    ControllerIP = "192.168.10.141"
    serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    host = ControllerIP
    port = 12345
    serversocket.bind((host, port))
    serversocket.listen(5)

    string = []
    GA = []
    result = []
    flag=0

    while flag==0:
        (clientsocket, addr) = serversocket.accept()

        while True:
            data = clientsocket.recv(4096)
            buffer = data
            f = open('temp.txt', 'w+')
            f.write(buffer)
            f = open('temp.txt', 'r')
            string2 = f.read()
            GA = string2.split('w')
            #  for i in range(0,15):
            # string2[i] = string[i]
            for i in range(0, 5):
                result.append(GA[i])

            if len(result) == 5:
                flag=1
                getGAdata(result,sendresult)
                break
            if not data:
                break
        clientsocket.close()


        # s.close


def createTopo(topo, coreSwitch, aggrSwitch, edgeSwitch, coreSwitchNumber, aggrSwitchNumber, edgeSwitchNumber):

    net = Mininet(topo=None, link=TCLink, controller=None)

    controllerIP = "192.168.10.142"
    controllerIP2 = "192.168.10.138"
    controllerIP3 = "192.168.10.139"
    controllerIP4 = "192.168.10.140"

    c = []
    c1 = net.addController("controller1", controller=RemoteController, ip=controllerIP, port=6633)
    c2 = net.addController("controller2", controller=RemoteController, ip=controllerIP2, port=6633)
    c3 = net.addController("controller3", controller=RemoteController, ip=controllerIP3, port=6633)
    c4 = net.addController("controller4", controller=RemoteController, ip=controllerIP4, port=6633)

    c.append(c1)
    c.append(c2)
    c.append(c3)
    c.append(c4)

    topo.createSwitchAndHost(net)

    topo.createLinks(net)

    print ("coreSwitch0")
    print (coreSwitch[0])

    net.build()

    for i in range(0, 4):
        coreSwitch[i].start([c[0],c[1],c[2],c[3]])
	

    for i in range(0, 2):
        aggrSwitch[i].start([c[0]])
        aggrSwitch[i + 2].start([c[1]])
        aggrSwitch[i + 4].start([c[2]])
        aggrSwitch[i + 6].start([c[3]])
    for i in range(0, 2):
        edgeSwitch[i].start([c[0]])
        edgeSwitch[i + 2].start([c[1]])
        edgeSwitch[i + 4].start([c[2]])
        edgeSwitch[i + 6].start([c[3]])

    print "\nDumping host connections\n"
    # dumpNodeConnections(net.hosts)
    print "\nTesting network connectivity\n"
    # net.pingAll()
    print "\nTesting bandwidth between h1 and h2\n"

    # iperfTest(net, topo)

    sendresult =[]
    #recvdata(sendresult)

    print(sendresult)

    #coreSwitch[0].cmdPrint('sudo ovs-vsctl set-controller ' + str(coreSwitch[0]) + ' tcp:' + sendresult[0] + ':6633')
    #coreSwitch[1].cmdPrint('sudo ovs-vsctl set-controller ' + str(coreSwitch[1]) + ' tcp:' + sendresult[1] + ':6633')
    #aggrSwitch[0].cmdPrint('sudo ovs-vsctl set-controller ' + str(aggrSwitch[0]) + ' tcp:' + sendresult[1] + ':6633')
    #aggrSwitch[1].cmdPrint('sudo ovs-vsctl set-controller ' + str(aggrSwitch[1]) + ' tcp:' + sendresult[2] + ':6633')
    #aggrSwitch[2].cmdPrint('sudo ovs-vsctl set-controller ' + str(aggrSwitch[2]) + ' tcp:' + sendresult[4] + ':6633')
    #aggrSwitch[3].cmdPrint('sudo ovs-vsctl set-controller ' + str(aggrSwitch[3]) + ' tcp:' + sendresult[5] + ':6633')
    #edgeSwitch[0].cmdPrint('sudo ovs-vsctl set-controller ' + str(edgeSwitch[0]) + ' tcp:' + sendresult[3] + ':6633')
    #edgeSwitch[1].cmdPrint('sudo ovs-vsctl set-controller ' + str(edgeSwitch[1]) + ' tcp:' + sendresult[4] + ':6633')
    #edgeSwitch[2].cmdPrint('sudo ovs-vsctl set-controller ' + str(edgeSwitch[2]) + ' tcp:' + sendresult[8] + ':6633')
    #edgeSwitch[3].cmdPrint('sudo ovs-vsctl set-controller ' + str(edgeSwitch[3]) + ' tcp:' + sendresult[9] + ':6633')

    print( int(round(time.time() * 1000)) )


    CLI(net)
    net.stop()


if __name__ == '__main__':

    setLogLevel('info')

    topo = FatTreeTopo()

    tempCoreSwitch = []
    tempAggrSwitch = []
    tempEdgeSwitch = []

    tempCoreSwitchNumber = topo.returnCoreSwitchNumber()
    tempAggrSwitchNumber = topo.returnAggrSwitchNumber()
    tempEdgeSwitchNumber = topo.returnEdgeSwitchNumber()
    tempCoreSwitch = topo.returnCoreSwitch()
    tempAggrSwitch = topo.returnAggrSwitch()
    tempEdgeSwitch = topo.returnEdgeSwitch()

    createTopo(topo, tempCoreSwitch, tempAggrSwitch, tempEdgeSwitch, tempCoreSwitchNumber, tempAggrSwitchNumber,
               tempEdgeSwitchNumber)

